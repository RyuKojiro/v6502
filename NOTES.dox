/**
\mainpage

\section Components

The v6502 infrastructure currently consists of a few major tools, and their API
subsections. (L) indicates that a module is a member of its library target.

- \subpage vm (v6502)
	- \ref cpu.h (L)
		- \ref isa
		- \ref cpu_lifecycle
		- \ref cpu_exec
		- \ref cpu_kmap
	- \ref mem.h (L)
		- \ref mem_boundaries
		- \ref mem_lifecycle
		- \ref mem_access
		- \ref mem_cache
	- \ref log.h
		- \ref log
	- \ref breakpoint.h
		- \ref breakpoint
	- \ref debugger.h
		- \ref debugger
	- \ref textmode.h
		- \ref textmode
- \subpage as (as6502)
	- \ref parser.h (L)
		- \ref parser_translit
		- \ref parser_line
		- \ref parser_help
	- \ref linectl.h (L)
		- \ref linectl
	- \ref codegen.h (L)
		- \ref codegen
	- \ref error.h (L)
		- \ref as_error
	- \ref symbols.h (L)
		- \ref sym_lifecycle
		- \ref sym_access
		- \ref sym_ez
		- \ref sym_rep
- \subpage ld (ld6502)
	- \ref object.h (L)
		- \ref obj_lifecycle
		- \ref obj_access
	- \ref ines.h (L)
	- \ref flat.h (L)
	- \ref aout.h (L)
- \subpage dis (dis6502)
	- \ref reverse.h (L)
		- \ref rev

\section Building

The entire project is separated into libraries for each of the
\ref Components. You can build each target in its directory, or build its
library with `make lib`. Everything uses portable Makefiles, if you want to
just build and test the entire project, simply run `make` in the top level
directory.

\section Testing

Currently, running make in the top level directory will automatically make all
subdirectory targets with the final one being the tests directory. Inside the
tests directory are unit tests that test actual runs of the assembler,
disassembler, interactive VM, and a compiled set of C-based unit tests.

v6502 has been successfully built and tested without modification on the
following platforms:

- x86_64-apple-darwin13.4.0 (clang 6.0, little-endian, 64-bit, GNU make)

- avr (gcc 4.8.1, mixed-endian, 8-bit, GNU make) *libraries only

- i386--netbsdelf (clang 3.4 & gcc 4.5.3, little-endian, 32-bit, BSD make)

- powerpc-apple-darwin9 (gcc 4.0.1, big-endian, 32-bit, GNU make)

- x86_64-unknown-freebsd10.1 (clang 3.4.1, little-endian, 64-bit, BSD make)

- armv6--netbsdelf-eabihf (gcc 4.8.4, little-endian, 32-bit, BSD make)

- x86_64-linux-gnu (gcc 4.7.2, little-endian, 64-bit, GNU make)

There is also an `analyze` target which will run the clang static analyzer
against any library or binary target. This is also makeable from the top level.

\section License

The entire v6502 infrastructure is distributed under the MIT license. The exact
license is as follows:

\verbatim
Copyright (c) 2013 Daniel Loffgren

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
\endverbatim

\page cpu_kmap Karnaugh Map Analysis

<a href="https://en.wikipedia.org/wiki/Karnaugh_map">Karnaugh Maps</a> are used in v6502's CPU design to optimize and reduce large switch statements, which result in large jump tables, to a small number of bitwise operations. These all also have unit tests to make sure that the K-map reduction is sane. These maps make the hardware design decisions of the MOS 6502 microprocessor very quickly visually apparrent in a way that is easy to reduce based on goal. For example, it is obvious that the length of an instruction only relies on the high nibble if the low nibble is 0 or 9. This reduces what would otherwise be a giant switch statement to a few conditionals.

A tool called kmapgen is included in the project, which generates these K-maps colorized for different goals. It's output can be seen below.

\htmlinclude kmapgen/kmap.html

\page mem_cache Memory Map Cache

\section Background
The memory map cache consists of three arrays of host-width pointers that are the length of the entire memory in bytes. That is to say, for a 64 kilobyte virtual memory object (the maximum addressable) you will get a 65535 length array of pointers to v6502_readFunction's, a same-sized array of v6502_writeFunction's, and a same-sized array of context pointers. Each pointer being the word size of the host architecture. This is a classic space-time tradeoff that reduces memory map lookups to the subscripting of a C-array, rather than the traditional linked list traversal that was used in v6502 earlier on. On many architectures, this requires only adding a relative offset to the existing branch instruction that will end up calling the function. The time overhead is slightly increased during v6502_map calls, since it has to update the map, but only the portions of the map that change are updated, and the map is not intended to be changed rapidly during runtime, so the performance hit should be negligible.

\section Caveats
The large memory overhead is the obvious downside. This is somewhat mitigated by the fact that read, write, and context caches are allocated separately, and lazily. In the case where there are only context-free write-trap mappings, this saves two-thirds of the cache size.

A more important and much more dangerous caveat is that the map cache should not be toggled. There is currently no cache rebuild function (although one will probably come eventually). When map caching is disabled, maps will not be added to the caches (which will also not be dynamically allocated). So, if mappings are made with caching off, and then caching is turned on, the cache will be hit without a hard lookup, causing cache misses that trick the mapper into thinking that the mappings don't exist at runtime. This can all be avoided by setting the map caching as early as possible, and not altering it later.

\page dis Disassembler
\section dis_usage Arguments and Usage

usage: dis6502 [-o \a out_file] [-F \a format] [\a file ...]

Any number of binaries may be specified and they will all be disassembled,
individually.

- -o \a out_file
	
	Specify an \a out_file to write the assembly output to. If none is specified,
	the output will be piped to stdout.

- -F \a format
	
	Specify a \a format to use when reading in binaries.

	Supported formats:

	- flat - Root segment only, no symbol table, single execution unit ready to
		be loaded into memory for running.
	- ines - The iNES ROM format, which is the de facto standard for compiled
		NES ROMS.

\section dis_notes Notes

Depending on how well engineered/accurate the ROM/header information is in an
NES ROM, the program code may overrun into the CHR ROM, or might have padding
which will be assembled inline (but should not hinder disassembler byte
alignment.)

\page ld Linker
\page as Assembler
\section ld_usage Arguments and Usage

usage: as6502 [-STWw] [-F \a format] [\a file ...]

Any number of files may be specified and they will all be assembled,
individually. To create useful binaries, rather than just object files, either
specify flat as the format, or link the binaries with the \subpage ld. If no files
are specified, as6502 will assemble from stdin, line-buffered.

- -F \a format
	
	Specify a \a format to produce as output for linking or execution.

	Supported formats:

	- flat - Root segment only, no symbol table, single execution unit ready to
		be loaded into memory for running.
	- aout - Traditional a.out OMAGIC object file format.
	
- -S
	
	Dump assembly with binary results and addresses to stdout for verification
	of what is being produced. \see \ref debug

- -T

	After first pass, dump a human readable representation of the symbol table.

- -w
	
	Emit warnings where possible, and attempt to recover, then continue assembly.
	
- -W
	
	Treat warnings as errors.

\section ld_notes Notes

When assembling from stdin, label parsing and dereferencing is not supported.
This is because the labels are all determined in advance on a first pass that
only cares about instruction size, and then the second pass actually begins
converting the assembly to machine code, while dereferencing the labels along
the way via the pre-built table.

\section design Design

The assembler makes two passes over the source, and aims to be as efficient as
possible, while still exposing powerful access to the assembly process.

-# Reference calculation; conversion of variable names and labels to addresses.
	Preallocation of object blobs based on dot-prefixed directives.
-# (Only pass when assembling from stdin)
	Population of dot-prefixed lines (e.g. Filling <b>.data</b> blocks, assigning
	<b>.word</b> values, etc.)
	Conversion of instructions to machine code.

\section debug Debugging

Debug output logging has been added to allow printing of the assembly process,
as it happens, the output is column oriented and can be seen below. Comment
lines, or lines that contain no code or labels, are not printed. The column
headers have been added for clarity, and the middle 170 lines omitted for brevity.

\code
Offset  Op Lo Hi   Line  Label / Instruction
------  -- -- --   ----  -------------------
0x0000: 20 03 00 -   15:  	jsr $0003
0x0003: 20 38 00 -   16:  	jsr $0038
0x0006:          -   18: init:
0x0006: 20 04 00 -   19:  	jsr $0004
0x0009: 20 1e 00 -   20:  	jsr $001e
0x000c: 60       -   21:  	rts
	… 170 lines ommitted …
0x0130: a2 00    -  241:  	ldx #0
0x0132:          -  230: drawSnake:
0x0132: ea       -  243:  	nop
0x0133: ea       -  244:  	nop
0x0134: ca       -  245:  	dex
0x0135: d0 0c    -  246:  	bne $0c
0x0137: 60       -  247:  	rts
\endcode

\page vm Virtual Machine

\section referenceplatform Interactive VM

The included v6502 executable that is built using the v6502 API provides an
interactive debugger to a v6502 instance that allows arbitrary manipulation of
the machine and loading of data into memory. The interpreter will accept any
valid 6502 assembly as instructions to execute in-place without stepping the
CPU. The prompt always displays the current program counter address in hex, when
halted. When running the CPU can be interrupted with a SIGINT or ^C. Binary
images can be specified as arguments prior to runtime and automatically run on
start.

The non-assembly commands are as follows:

\verbatim
cpu                 Displays the current state of the CPU.
disassemble <addr>  Disassemble 10 instructions starting at a given address, or the program counter if no address is specified.
help                Displays this help.
load <file>         Load binary image into memory at 0x0600.
peek <addr>         Dumps the memory at and around a given address.
quit                Exits v6502.
run                 Contunuously steps the cpu until a 'brk' instruction is encountered.
reset               Resets the CPU.
mreset              Zeroes all memory.
step                Forcibly steps the CPU once.
verbose             Toggle verbose mode; prints each instruction as they are executed when running.
\endverbatim

The command interpreter supports shortening of these commands as far as possible
without being ambiguous. Ambiguous commands have an arbitrary priority based on
usefulness.

Example usage (debugging a binary):

\verbatim
Creating 1 virtual CPU…
Allocating 64k of virtual memory…
Resetting CPU…
Loading binary image "overflow.o" into memory…
Loaded 137 bytes.
Running…
Encountered 'brk' at 0x03.
(0x0004) disass $0600
0x0600: d8       - cld 
0x0601: a9 01    - lda #$01
0x0603: 8d 00 00 - sta $0000
0x0606: a9 80    - lda #$80
0x0608: 8d 00 00 - sta $0000
0x060b: 8d 00 00 - sta $0000
0x060e: a9 00    - lda #$00
0x0610: 8d 00 00 - sta $0000
0x0613: 8d 00 00 - sta $0000
0x0616: a0 01    - ldy #$01
(0x0004) v
Verbose mode enabled.
(0x0004) reset
(0x0600) r
0x0600: d8       - cld 
0x0601: a9 01    - lda #$01
0x0603: 8d 00 00 - sta $0000
0x0606: a9 80    - lda #$80
	… 20 lines ommitted …
0x061d: f0 1f    - beq $1f
0x063e: 60       - rts 
0x0003: 00       - brk 
Encountered 'brk' at 0x03.
(0x0004) cpu
Status Register: --XB-IZ-
CPU 0x100103a90: pc = 0x0004, ac = 0x00, x = 0x01, y = 0x01, sr = 0x36, sp = 0x01
MEM 0x100103ab0: memsize = 65535 (0xffff)
(0x0004) 
\endverbatim

\section api API

The simplest fault tolerant implementation of a v6502 instance, using the v6502
API, is as follows:

\code
#include <v6502/cpu.h>
#include <v6502/mem.h>

void fault(void *ctx, const char *e) {
	(*(int *)ctx)++;
}

int main(int argc, const char * argv[])
{
	int faulted = 0;
	
	v6502_cpu *cpu = v6502_createCPU();
	cpu->memory = v6502_createMemory(2048);
	cpu->fault_callback = fault;
	cpu->fault_context = &faulted;

	v6502_reset(cpu);

	while (!faulted) {
		v6502_step(cpu);
	}

	v6502_destroyMemory(cpu->memory);
	v6502_destroyCPU(cpu);
}
\endcode

It is worth noting that this code will run the cpu at the fastest possible speed,
with no regulation of timing. This is important for applications that expect a
working CPU clock.

*/
