/**
\mainpage

\section Components

The v6502 infrastructure currently consists of two major sections, and their API
subsections:

- \subpage vm (v6502)
	- \ref cpu.h
		- \ref cpu_lifecycle
		- \ref cpu_exec
	- \ref mem.h
		- \ref mem_boundaries
		- \ref mem_lifecycle
		- \ref mem_access
- \subpage as (as6502 / dis6502)
	- \ref parser.h
		- \ref parser_translit
		- \ref parser_line
		- \ref parser_help
	- \ref linectl.h
		- \ref linectl
	- \ref codegen.h
		- \ref codegen
	- \ref error.h
		- \ref as_error
	- \ref symbols.h
		- \ref sym_lifecycle
		- \ref sym_access
		- \ref sym_ez
		- \ref sym_rep
	- \ref object.h
		- \ref obj_lifecycle
		- \ref obj_access
		- \ref obj_mutate
	- \ref reverse.h
		- \ref rev
	- \ref flat.h
	- \ref aout.h

\section License

The entire v6502 infrastructure is distributed under the MIT license. The exact
license is as follows:

\verbatim
Copyright (c) 2013 Daniel Loffgren

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
\endverbatim

\page as Assembler / Disassembler
\section usage Arguments and Usage

usage: as6502 [-STWw] [-F \a format] [\a file ...]

Any number of files may be specified and they will all be assembled,
individually. There currently is no linker in the v6502 stack, as6502 just
outputs the raw binaries ready-to-execute. If no files are specified, as6502
will assemble from stdin, line-buffered.

- -F \a format
	
	Specify a \a format to produce as output for linking or execution.

	Supported formats:

	- flat - Root segment only, no symbol table, single execution unit ready to
		be loaded into memory for running.
	- aout - Traditional a.out OMAGIC object file format.
	
- -S
	
	Dump assembly with binary results and addresses to stdout for verification
	of what is being produced. \see \ref debug

- -T

	After first pass, dump a human readable representation of the symbol table.

- -w
	
	Emit warnings where possible, and attempt to recover, then continue assembly.
	
- -W
	
	Treat warnings as errors.

\section notes Notes

When assembling from stdin, label parsing and dereferencing is not supported.
This is because the labels are all determined in advance on a first pass that
only cares about instruction size, and then the second pass actually begins
converting the assembly to machine code, while dereferencing the labels along
the way via the pre-built table.

\section design Design

The assembler makes two passes over the source, and aims to be as efficient as
possible, while still exposing powerful access to the assembly process.

-# Reference calculation; conversion of variable names and labels to addresses.
	Preallocation of object blobs based on dot-prefixed directives.
-# (Only pass when assembling from stdin)
	Population of dot-prefixed lines (e.g. Filling <b>.data</b> blocks, assigning
	<b>.word</b> values, etc.)
	Conversion of instructions to machine code.

\section debug Debugging

Debug output logging has been added to allow printing of the assembly process,
as it happens, the outlook is column oriented and can be seen below. Comment
lines, or lines that contain no code or labels, are not printed. The column
headers have been added for clarity, and the middle 170 lines omitted for brevity.

\code
Offset  Op Lo Hi   Line  Label / Instruction
------  -- -- --   ----  -------------------
0x0000: 20 03 00 -   15:  	jsr $0003
0x0003: 20 38 00 -   16:  	jsr $0038
0x0006:          -   18: init:
0x0006: 20 04 00 -   19:  	jsr $0004
0x0009: 20 1e 00 -   20:  	jsr $001e
0x000c: 60       -   21:  	rts
	… 170 lines ommitted …
0x0130: a2 00    -  241:  	ldx #0
0x0132:          -  230: drawSnake:
0x0132: ea       -  243:  	nop
0x0133: ea       -  244:  	nop
0x0134: ca       -  245:  	dex
0x0135: d0 0c    -  246:  	bne $0c
0x0137: 60       -  247:  	rts
\endcode

\page vm Virtual Machine

\section debugger Interactive VM

The included v6502 executable that is built using the v6502 API provides an
interactive debugger to a v6502 instance that allows arbitrary manipulation of
the machine and loading of data into memory. The interpreter will accept any
valid 6502 assembly as instructions to execute in-place without stepping the
CPU. The prompt always displays the current program counter address in hex, when
halted. When running the CPU can be interrupted with a SIGINT or ^C. Binary
images can be specified as arguments prior to runtime and automatically run on
start.

The non-assembly commands are as follows:

\verbatim
cpu                 Displays the current state of the CPU.
disassemble <addr>  Disassemble 10 instructions starting at a given address, or the program counter if no address is specified.
help                Displays this help.
load <file>         Load binary image into memory at 0x0600.
peek <addr>         Dumps the memory at and around a given address.
quit                Exits v6502.
run                 Contunuously steps the cpu until a 'brk' instruction is encountered.
reset               Resets the CPU.
mreset              Zeroes all memory.
step                Forcibly steps the CPU once.
verbose             Toggle verbose mode; prints each instruction as they are executed when running.
\endverbatim

The command interpreter supports shortening of these commands as far as possible
without being ambiguous. Ambiguous commands have an arbitrary priority based on
usefulness.

Example usage (debugging a binary):

\verbatim
Creating 1 virtual CPU…
Allocating 64k of virtual memory…
Resetting CPU…
Loading binary image "overflow.o" into memory…
Loaded 137 bytes.
Running…
Encountered 'brk' at 0x03.
(0x0004) disass $0600
0x0600: d8       - cld 
0x0601: a9 01    - lda #$01
0x0603: 8d 00 00 - sta $0000
0x0606: a9 80    - lda #$80
0x0608: 8d 00 00 - sta $0000
0x060b: 8d 00 00 - sta $0000
0x060e: a9 00    - lda #$00
0x0610: 8d 00 00 - sta $0000
0x0613: 8d 00 00 - sta $0000
0x0616: a0 01    - ldy #$01
(0x0004) v
Verbose mode enabled.
(0x0004) reset
(0x0600) r
0x0600: d8       - cld 
0x0601: a9 01    - lda #$01
0x0603: 8d 00 00 - sta $0000
0x0606: a9 80    - lda #$80
	… 20 lines ommitted …
0x061d: f0 1f    - beq $1f
0x063e: 60       - rts 
0x0003: 00       - brk 
Encountered 'brk' at 0x03.
(0x0004) cpu
Status Register: --XB-IZ-
CPU 0x100103a90: pc = 0x0004, ac = 0x00, x = 0x01, y = 0x01, sr = 0x36, sp = 0x01
MEM 0x100103ab0: memsize = 65535 (0xffff)
(0x0004) 
\endverbatim

\section api API

The simplest fault tolerant implementation of a v6502 instance, using the v6502
API, is as follows:

\code
#include "cpu.h"
#include "mem.h"

void fault(void *ctx, const char *e) {
	((int)*ctx)++;
}

int main(int argc, const char * argv[])
{
	int faulted = 0;
	
	v6502_cpu *cpu = v6502_createCPU();
	cpu->memory = v6502_createMemory(2048);
	cpu->fault_callback = fault;
	cpu->fault_context = &faulted;

	v6502_reset(cpu);

	while (!faulted) {
		v6502_step(cpu);
	}

	v6502_destroyMemory(cpu->memory);
	v6502_destroyCPU(cpu);
}
\endcode

It is worth noting that this code will run the cpu at the fastest possible speed,
with no regulation of timing. This is important for applications that expect a
working CPU clock.

*/
